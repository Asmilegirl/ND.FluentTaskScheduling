@model IEnumerable<ND.FluentTaskScheduling.Model.response.TaskListDto>
@using ND.FluentTaskScheduling.Model.enums
@using ND.FluentTaskScheduling.Model.response
@using ND.FluentTaskScheduling.Model;
@{
    ViewBag.Title = "Index";
    List<NodeDetailDto> nodelist = ViewBag.NodeList as List<NodeDetailDto>;
    List<TaskListDto> tasklist = ViewBag.TaskList as List<TaskListDto>;
    List<tb_user> userlist = ViewBag.UserList as List<tb_user>;
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<section class="content-header">
    <h1>
        任务列表
        <small>展示任务列表</small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i> 任务管理</a></li>
        <li><a href="#">任务列表</a></li>
    </ol>
</section>

<section class="content">
    <!--查询条件-->
  
        <div class="box box-primary">
           <div class="box-header with-border"> <h3 class="box-title">检索条件</h3> 
            <div class="box-tools pull-right">
                
                <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
            </div>
        </div>

            <div class="box-body">
            
             <div class="row">
                 <div class="col-md-2">
                     <div class="form-group">
                         <label>任务创建起始时间:</label>
                         <div class="input-group">
                             <div class="input-group-addon">
                                 <i class="fa fa-calendar"></i>
                             </div>
                             <input type="text" name="TaskCreateTimeRange" value="@ViewBag.TaskCreateTimeRange" class="form-control" id="reservation">
                         </div> 
                     </div>
                     
                 </div>

                

                 <div class="col-md-2">
                     <div class="form-group">
                         <label>节点名称</label>
                         <select class="form-control select2" name="NodeId" id="selNodeNameList" >
                             <option value="-1">全部</option>
                             @for (int i = 0; i < nodelist.Count; i++)
                             {
                                <option value="@nodelist[i].NodeDetail.id" @((ViewBag.NodeId + "") == nodelist[i].NodeDetail.id.ToString() ? "selected='selected'" : "")>@nodelist[i].NodeDetail.nodename</option>
                             }
                           
                         </select>
                     </div>
                 </div>

                 <div class="col-md-2">
                     <div class="form-group">
                         <label>节点运行状态</label>
                         <select class="form-control select2" name="NodeStatus" id="selNodeStatusList">
                             <option value="-1">全部</option>
                             @foreach (var o in (ND.FluentTaskScheduling.Helper.EnumHelper<NodeStatus>.GetAllEnumsOfList2()))
                             {
                                 <option value="@o.Value" @((ViewBag.NodeStatus + "") == o.Value ? "selected='selected'" : "")>@o.Text</option>
                             }

                         </select>
                     </div>
                 </div>

                 <div class="col-md-2">
                     <div class="form-group">
                         <label>任务调度状态</label>
                         <select class="form-control select2" name="TaskSchduleStatus" id="selTaskSchduleStatus">
                             <option value="-1">全部</option>
                             @foreach (var o in (ND.FluentTaskScheduling.Helper.EnumHelper<TaskScheduleStatus>.GetAllEnumsOfList2()))
                             {
                                 <option value="@o.Value" @((ViewBag.TaskSchduleStatus + "") == o.Value ? "selected='selected'" : "")>@o.Text</option>
                             }
                            
                         </select>
                     </div>
                 </div>

                 <div class="col-md-2">
                     <div class="form-group">
                         <label>任务执行状态</label>
                         <select class="form-control select2" name="TaskExecuteStatus" data-placeholder="任务执行状态" id="selTaskExecuteStatus">
                             <option value="-1">全部</option>
                             @foreach (var o in (ND.FluentTaskScheduling.Helper.EnumHelper<ExecuteStatus>.GetAllEnumsOfList2()))
                             {
                                 <option value="@o.Value" @((ViewBag.TaskExecuteStatus + "") == o.Value ? "selected='selected'" : "")>@o.Text</option>
                             }
                         </select>
                     </div>
                 </div>

                 <div class="col-md-2">
                     <div class="form-group">
                         <label>任务名称:</label>
                         <select class="form-control select2" name="TaskId" id="selTaskList">
                             <option value="-1">全部</option>
                             @for (int i = 0; i < tasklist.Count; i++)
                             {
                                 <option value="@tasklist[i].Task.id" @((ViewBag.TaskId + "") == tasklist[i].Task.id.ToString() ? "selected='selected'" : "")>@tasklist[i].Task.taskname </option>
                             }
                         </select>
                         <!-- /.input group -->
                     </div>
                 </div>

                 <div class="col-md-2">
                     <div class="form-group">
                         <label>报警类型</label>
                         <select class="form-control select2" name="AlarmType" id="selAlarmType" data-placeholder="报警类型">
                             <option value="-1">全部</option>
                             @foreach (var o in (ND.FluentTaskScheduling.Helper.EnumHelper<ND.FluentTaskScheduling.Helper.AlarmType>.GetAllEnumsOfList2()))
                             {
                                 <option value="@o.Value" @((ViewBag.AlarmType + "") == o.Value ? "selected='selected'" : "")>@o.Text</option>
                             }
                         </select>
                     </div>
                 </div>

                 <div class="col-md-2">
                     <div class="form-group">
                         <label>任务类型</label>
                         <select class="form-control select2" name="AlarmType" id="selTaskType" data-placeholder="报警类型">
                             <option value="-1">全部</option>
                             @foreach (var o in (ND.FluentTaskScheduling.Helper.EnumHelper<TaskType>.GetAllEnumsOfList2()))
                             {
                                 <option value="@o.Value" @((ViewBag.TaskType + "") == o.Value ? "selected='selected'" : "")>@o.Text</option>
                             }
                         </select>
                     </div>
                 </div>


                 <div class="col-md-2">
                     <div class="form-group">
                         <label>创建人:</label>
                         <select class="form-control select2" name="CreateBy" id="selcreateby">
                             <option value="-1">全部</option>
                             @for (int i = 0; i < userlist.Count; i++)
                             {
                                 <option value="@userlist[i].id" @((ViewBag.CreateBy + "") == userlist[i].realname.ToString() ? "selected='selected'" : "")>@userlist[i].realname.ToString()</option>
                             }
                         </select>
                         <!-- /.input group -->
                     </div>
                 </div>





             </div>
            
         </div>

            <div class="box-footer">
                <a  href="@Url.Action("add", "task")" class="btn margin-r-5 btn-info pull-right">新增</a>
                <button type="button" class="btn margin-r-5 btn-primary pull-right" id="btnSearchTask">查询</button>
            </div>
          
        </div>
   

  

    <div class="box box-default">
    <!--任务列表-->
        <div class="row">
            <div class="col-xs-12">

                <div class="box">
                    <div class="box-header">
                        <h3 class="box-title tipso_style" id="box-title">任务展示列表</h3>
                    </div>
                    <!-- /.box-header -->
                    <div class="box-body">
                        <table id="tbTaskList" class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th>编号</th>
                                    <th>任务名称</th>
                                    <th>任务类型</th>
                                   
                                   
                                    @*<th>任务类名</th>
                                    <th>任务dll文件名</th>*@
                                    <th>任务Corn</th>
                                    <th>节点名称</th>
                                    <th>节点运行状态</th>
                                    <th>调度状态</th>
                                    <th>下次调度时间</th>
                                    <th>最后一次运行状态</th>
                                    @*<th>参数</th>*@
                                    <th>总执行数量</th>
                                    <th>错误数量</th>
                                    <th>成功数量</th>
                                    <th>更新时间</th>
                                    <th>创建时间</th>
                                    @*<th>是否启用报警</th>
                                    <th>报警类型</th>
                                    <th>报警人</th>*@
                                    <th>创建人</th>
                                    <th>操作</th>
                                    
                                </tr>
                            </thead>
                            <tbody>
                @*@foreach (var item in Model)
                {
                    
                                <tr>
                                    <td>@item.Task.id</td>
                                    <td>@item.Task.taskname</td>
                                    <td>
                                       @item.Task.taskdescription
                                    </td>
                                    <td>@item.Task.tasknamespace</td>
                                    <td>@item.Task.taskclassname</td>
                                    <td>@item.TaskVersion.zipfilename</td>
                                    <td>@item.TaskVersion.taskcron</td>
                                    <td>@item.Node.nodename</td>
                                    <td class="nodestatus_@item.Node.nodestatus">@(((NodeStatus)item.Node.nodestatus).description())</td>
                                    <td class="schedulestatus_@item.Task.taskschedulestatus">@(((TaskScheduleStatus)item.Task.taskschedulestatus).description())</td>
                                    <td class="executestatus_@item.TaskVersion.taskrunstatus">@(((ExecuteStatus)item.TaskVersion.taskrunstatus).description())</td>
                                    <td>@item.TaskVersion.taskparams</td>
                                    <td>@item.TaskVersion.taskruncount</td>
                                    <td>@item.TaskVersion.taskerrorcount</td>
                                    <td>@(item.TaskVersion.taskruncount - item.TaskVersion.taskerrorcount)</td>
                                    <td>@item.Task.createtime</td>
                                    <td>@item.TaskVersion.taskupdatetime</td>
                                    <td>
                                        @if((TaskScheduleStatus)item.Task.taskschedulestatus == TaskScheduleStatus.NoSchedule )//未调度
                                        { 
                                        <button taskid="@item.Task.id" nodeid="@item.TaskVersion.nodeid" taskversionid="@item.TaskVersion.id" commandname="4" class="btn margin-r-5 btn-sm btn-primary pull-right" hdt="btnchangestatus">启动</button>
    
                                        }
                                        else if ((TaskScheduleStatus)item.Task.taskschedulestatus == TaskScheduleStatus.WaitSchedule)//待调度
                                        {
                                            
                                        }
                                        else if ((TaskScheduleStatus)item.Task.taskschedulestatus == TaskScheduleStatus.Scheduling)//调度中
                                        {
                                            <button taskid="@item.Task.id" nodeid="@item.TaskVersion.nodeid" taskversionid="@item.TaskVersion.id" commandname="6" class="btn margin-r-5  btn-sm pull-right btn-primary " hdt="btnchangestatus">暂停</button>
                                            <button taskid="@item.Task.id" nodeid="@item.TaskVersion.nodeid" taskversionid="@item.TaskVersion.id" commandname="5" class="btn margin-r-5  btn-sm btn-danger pull-right  " hdt="btnchangestatus">停止</button>
                                        }
                                        else if ((TaskScheduleStatus)item.Task.taskschedulestatus == TaskScheduleStatus.PauseSchedule)//暂停调度
                                        {
                                            <button taskid="@item.Task.id" nodeid="@item.TaskVersion.nodeid" taskversionid="@item.TaskVersion.id" commandname="7" class="btn margin-r-5  btn-sm pull-right btn-primary " hdt="btnchangestatus">恢复</button>
                                            <button taskid="@item.Task.id" nodeid="@item.TaskVersion.nodeid" taskversionid="@item.TaskVersion.id" commandname="5" class="btn margin-r-5  btn-sm btn-danger pull-right  " hdt="btnchangestatus">停止</button>
                                        }
                                        else if ((TaskScheduleStatus)item.Task.taskschedulestatus == TaskScheduleStatus.StopSchedule)//停止调度
                                        {
                                            <button taskid="@item.Task.id" nodeid="@item.TaskVersion.nodeid" taskversionid="@item.TaskVersion.id" commandname="4" class="btn margin-r-5  btn-sm pull-right btn-primary " hdt="btnchangestatus">启动</button>
                                        }
                                        <a taskid="@item.Task.id" nodeid="@item.TaskVersion.nodeid" taskversionid="@item.TaskVersion.id" taskname="@item.Task.taskname" nodename="@item.TaskVersion.nodeid" href="@Url.Action("TaskExcuteLog", "Log", new { taskid = @item.Task.id })" class="btn   btn-sm bg-purple margin pull-right  " hdt="btnloadtaskexeuteloglist">任务调度执行日志</a>
                                    </td>
                                </tr>
                     }*@     
                                
                               
                            </tbody>
                            <tfoot>
                               
                            </tfoot>
                        </table>
                    </div>
                    <!-- /.box-body -->
                </div>
            </div>
        </div>
      </div>
</section>

<script>

    //更新任务状态
    function ChangeTaskStatus(nodeid, taskid, taskversionid, commandname) {
        $.ajax({
            url: '@Url.Action("ChangeTaskStatus", "Task")',
            type: "post",
            data: {
                nodeid: nodeid,
                taskid: taskid,
                taskversionid: taskversionid,
                commandname: commandname
            },
            success: function (data) {
                if (parseInt(data.status) != 1) {
                    swal(data.msg, "", "error");
                    return;
                } else {
                    //成功
                    swal("操作成功,请稍候刷新查看", "", "success", function () {
                        window.location.reload();
                    });
                    window.location.reload();
                }
            }
        });
    }
    function ChangeStatus(obj) {
        var nodeid = $(obj).attr("nodeid");
        var taskid = $(obj).attr("taskid");
        var taskversionid = $(obj).attr("taskversionid");
        var commandname = $(obj).attr("commandname");
        swal({
            title: "你确定要执行此操作?",
            text: "执行完后稍候刷新查看执行结果!",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "确定",
            cancelButtonText: "取消",
            closeOnConfirm: true,
            closeOnCancel: true,
            showLoaderOnConfirm: true,
            animation: "slide-from-top"
        },
        function (isConfirm) {
            if (!isConfirm) {//取消
                // swal("已取消", "您已取消此操作", "error");
                return;
            }

            ChangeTaskStatus(nodeid, taskid, taskversionid, commandname);


        });

    }
    var tbl;
    $(function () {
        tbl = $('#tbTaskList').DataTable({
            "bFilter": false, //过滤功能
            "aoColumns": [

              { "data": "Task.id" },//任务编号
              {
                  "mRender": function (mData, type, full) {
                      var html = [];
                      var isenabledalaram = full.Task.isenablealarm == "1" ? "启用" : "禁用";
                      var dis = _G.StatusDiscription($("#selAlarmType option"), full.Task.alarmtype);
                      var alaramperson = "";
                      $.each(full.Task.alarmuserid.split(","), function (k, v) {
                          alaramperson = _G.StatusDiscription($("#selcreateby option"), v) + "," + alaramperson
                      });
                      var disHtml = "任务名称:&#13;" + full.Task.taskname + "&#13;&#10;"
                                     +"任务描述:&#13;" + full.Task.taskdescription + "&#13;&#10;"
                                     + "任务命名空间:&#13;" + full.Task.tasknamespace + "&#13;&#10;"
                                     + "任务类名:&#13;" + full.Task.taskclassname + "&#13;&#10;"
                                     + "任务参数:&#13;" + full.TaskVersion.taskparams.replace(/\"/g, "&quot;") + "&#13;&#10;"
                                     + "任务dll文件名:&#13;" + full.TaskVersion.zipfilename + "&#13;&#10;"
                                     + "是否启用报警:" + isenabledalaram + "&#13;&#10;"
                                     + "报警类型:" + dis + "&#13;&#10;"
                                     + "报警人:" + alaramperson.substring(0, alaramperson.length - 1) + "&#13;&#10;";
                                     
                      //tip--right data-tip=\"true\" data-tip-content=\"" + disHtml + "\"
                      html.push("<a class=\"task taskname tipso_style\" title=\" "+ disHtml + "\"  id=\"taskname" + full.Task.id + "\"     href=\"../Task/Edit?taskid=" + full.Task.id + "&taskversionid=" + full.TaskVersion.id + "\">" + full.Task.taskname + "</a>")
                      return html.join('');
                  }
              },//任务节点名称
               {
                   "mRender": function (mData, type, full) {
                       var html = [];
                       if (full.Task.tasktype == '@(((int)TaskType.OnceTask).ToString())') {
                           html.push("<span class=\"label label-primary\">" + _G.StatusDiscription($("#selTaskType option"), full.Task.tasktype) + "</span>")
                       } else
                       {
                           html.push("<span class=\"label label-warning\">" + _G.StatusDiscription($("#selTaskType option"), full.Task.tasktype) + "</span>")
                       }
                       return html.join('');
                   }
               },//任务类型
               
              
              //{ "data": "Task.taskclassname" },//任务类名
             // {  "data": "TaskVersion.zipfilename" },//任务dll文件名
             
              {
                  "mRender": function (mData, type, full) {
                      var html = [];
                      html.push("<span>" + full.TaskVersion.taskcron + "</span>")
                      return html.join('');
                  }
              },//任务节点名称
               {
                   "mRender": function (mData, type, full) {
                       var html = [];
                       html.push("<a class=\"node\"  href=\"../Node/Index?nodeid=" + full.Node.id + "\">" + full.Node.nodename + "</a>")
                       return html.join('');
                   }
               },//任务节点名称
               {
                   "mRender": function (mData, type, full) {
                       var html = [];
                       html.push("<a class=\"nodestatus_" + full.Node.nodestatus + "\">" + _G.StatusDiscription($("#selNodeStatusList option"), full.Node.nodestatus) + "</a>")
                       return html.join('');
                   }
               },//任务节点运行状态
                {
                    "mRender": function (mData, type, full) {
                        var html = [];
                        html.push("<a class=\"schedulestatus_" + full.Task.taskschedulestatus + "\">" + _G.StatusDiscription($("#selTaskSchduleStatus option"), full.Task.taskschedulestatus) + "</a>")
                        return html.join('');
                    }
                },//任务调度状态
                  { "data": "Task.nextruntime" },//任务下次运行时间
                 {
                     "mRender": function (mData, type, full) {
                         var html = [];
                         html.push("<a class=\"executestatus_" + full.TaskVersion.taskrunstatus + "\">" + _G.StatusDiscription($("#selTaskExecuteStatus option"), full.TaskVersion.taskrunstatus) + "</a>")
                         return html.join('');
                     }
                 },//任务最后一次运行状态

                //{   "data": "TaskVersion.taskparams" },//任务运行参数
                {   "data": "TaskVersion.taskruncount" },//任务执行总数量
                {   "data": "TaskVersion.taskerrorcount" },//任务总错误数量
                {
                     "mRender": function (mData, type, full) {
                         var html = [];
                         html.push("<span>" + (full.TaskVersion.taskruncount - full.TaskVersion.taskerrorcount) + "</span>")
                         return html.join('');
                     }
                 },//任务总成功数量
                {
                    "mRender": function (mData, type, full) {
                        var html = [];
                        html.push("<span>" + full.TaskVersion.taskupdatetime.replace("T", " ").substring(0, full.TaskVersion.taskupdatetime.length-4) + "</span>")
                        return html.join('');
                    }
                },//任务更新时间
               // {   "data": "TaskVersion.taskupdatetime" },
                {   "data": "TaskVersion.createtime" },//任务创建时间
                @*{
                    "mRender": function (mData, type, full) {
                        var html = [];
                        var htmldis = (full.Task.isenablealarm == '1' ? "<span class=\"label label-success\">启用</span>" : "<span class=\"label label-danger\">未启用</span>");
                        html.push(htmldis)
                        return html.join('');
                    }
                },
               {
                   "mRender": function (mData, type, full) {
                       if (full.Task.isenablealarm == '1') {
                           var html = [];
                           var dis = _G.StatusDiscription($("#selAlarmType option"), full.Task.alarmtype)
                           var htmldis = (full.Task.alarmtype == '@((int)ND.FluentTaskScheduling.Helper.AlarmType.Email)' ? "<span class=\"label label-success\">" + dis + "</span>" : "<span class=\"label label-warning\">" + dis + "</span>");
                           html.push(htmldis)
                           return html.join('');
                       } else { return "";}
                   }
               },
                {
                    "mRender": function (mData, type, full) {
                        if (full.Task.isenablealarm == '1') {
                            var html = [];
                            var dis = "";
                            $.each(full.Task.alarmuserid.split(","), function (k, v) {
                                dis = _G.StatusDiscription($("#selcreateby option"), v) + "," + dis
                            });

                            var htmldis = "<a class=\"label btn-dropbox\" href=\"\">" + dis.substring(0, dis.length - 1) + "</a>";
                            html.push(htmldis)
                            return html.join('');
                        } else { return ""; }
                    }
                },*@
                {
                    "mRender": function (mData, type, full) {
                            var html = [];
                            var dis = _G.StatusDiscription($("#selcreateby option"), full.Task.createby) 
                            var htmldis = "<a class=\"label btn-dropbox\" href=\"\">" + dis + "</a>";
                            html.push(htmldis)
                            return html.join('');
                        } 
                   
                },
               {
                    
                   "mRender": function (mData, type, full) {
                       var html = [];
                       if (full.Task.taskschedulestatus == '@((int)TaskScheduleStatus.NoSchedule)') {
                           html.push(" <button taskid='" + full.Task.id + "' nodeid='" + full.TaskVersion.nodeid + "' taskversionid='" + full.TaskVersion.id + "' commandname=\"4\" class=\"btn  btn-sm btn-info margin\" onclick=ChangeStatus(this) hdt=\"btnchangestatus\">启动</button>");
                       }
                       else if (full.Task.taskschedulestatus == '@((int)TaskScheduleStatus.Scheduling)') {
                           html.push(" <button taskid='" + full.Task.id + "' nodeid='" + full.TaskVersion.nodeid + "' taskversionid='" + full.TaskVersion.id + "' commandname=\"6\" class=\"btn   btn-sm  bg-maroon\" onclick=ChangeStatus(this) hdt=\"btnchangestatus\">暂停</button>");
                           html.push(" <button taskid='" + full.Task.id + "' nodeid='" + full.TaskVersion.nodeid + "' taskversionid='" + full.TaskVersion.id + "' commandname=\"5\" class=\"btn  btn-sm  btn-danger margin\" onclick=ChangeStatus(this) hdt=\"btnchangestatus\">停止</button>");
                       }
                       else if (full.Task.taskschedulestatus == '@((int)TaskScheduleStatus.PauseSchedule)') {
                           html.push(" <button taskid='" + full.Task.id + "' nodeid='" + full.TaskVersion.nodeid + "' taskversionid='" + full.TaskVersion.id + "' commandname=\"7\" class=\"btn   btn-sm btn-primary\" onclick=ChangeStatus(this) hdt=\"btnchangestatus\">恢复</button>");
                           html.push(" <button taskid='" + full.Task.id + "' nodeid='" + full.TaskVersion.nodeid + "' taskversionid='" + full.TaskVersion.id + "' commandname=\"5\" class=\"btn  btn-sm btn-danger margin\" onclick=ChangeStatus(this) hdt=\"btnchangestatus\">停止</button>");
                       }
                       else if (full.Task.taskschedulestatus == '@((int)TaskScheduleStatus.StopSchedule)') {
                           html.push(" <button taskid='" + full.Task.id + "' nodeid='" + full.TaskVersion.nodeid + "' taskversionid='" + full.TaskVersion.id + "' commandname=\"4\" class=\"btn  btn-sm btn-info \" onclick=ChangeStatus(this)  hdt=\"btnchangestatus\">启动</button>");
                           html.push("<a  taskid='" + full.Task.id + "' nodeid='" + full.TaskVersion.nodeid + "' taskversionid='" + full.TaskVersion.id + "' taskname='" + full.Task.taskname + "' nodename='" + full.TaskVersion.nodeid + "' href=\"../Task/Edit?taskid=" + full.Task.id + "&taskversionid=" + full.TaskVersion.id + "\" class=\"btn margin  btn-sm btn-warning    \" >编辑</a>");
                           
                           
                       }
                       html.push("<a  taskid='" + full.Task.id + "' nodeid='" + full.TaskVersion.nodeid + "' taskversionid='" + full.TaskVersion.id + "' taskname='" + full.Task.taskname + "' nodename='" + full.TaskVersion.nodeid + "' href=\"../Log/TaskExcuteLog?taskid=" + full.Task.id + "\" class=\"btn   btn-sm bg-purple margin-r-5 \" hdt=\"btnloadtaskexeuteloglist\">执行日志</a>");
                       
                       return html.join('');
                   }
               },

            ],
            "paging": true,
            "lengthChange": false,
            // "searching": true,//是否允许Datatables开启本地搜索
            "ordering": false,//是否允许Datatables开启排序
            "info": true,//控制是否显示表格左下角的信息
            "autoWidth": true,//自动宽度
            "bProcessing": true, //DataTables载入数据时，是否显示‘进度’提示
            "bScrollCollapse": true, //是否开启DataTables的高度自适应，当数据条数不够分页数据条数的时候，插件高度是否随数据条数而改变
            "bPaginate": true, //是否显示（应用）分页器
            "bInfo": true, //是否显示页脚信息，DataTables插件左下角显示记录数
            "sPaginationType": "full_numbers", //详细分页组，可以支持直接跳转到某页
            "sScrollX": "100%",
            "scrollX": true,
            "iDisplayLength": 10,//默认显示
            "aLengthMenu": [10, 15, 20, 25, 50],//控制每页显示多少个
            "oLanguage": oLanguageData,
            "bServerSide": true,////指定服务端分页，必须的属性！
            "sAjaxSource": "Index",
            "fnServerParams": function (aoData) {
                aoData.push({ "name": "TaskId", "value": '@ViewBag.TaskId' });
                aoData.push({ "name": "NodeId", "value": $("#selNodeNameList option:selected").val() });
                aoData.push({ "name": "TaskCreateTimeRange", "value": $("#reservation").val() });
                aoData.push({ "name": "TaskId", "value": $("#selTaskList option:selected").val() == "-1" ? '@ViewBag.TaskId' : $("#selTaskList option:selected").val() });
                aoData.push({ "name": "TaskExecuteStatus", "value": $("#selTaskExecuteStatus option:selected").val() });
                aoData.push({ "name": "TaskSchduleStatus", "value": $("#selTaskSchduleStatus option:selected").val() });

            },
            "fnServerData": function (sSource, aoData, fnCallback) {

                $.ajax({
                    "dataType": 'json',
                    "type": "POST",
                    "url": sSource,
                    "data": aoData,
                    "success": function (data) {
                        if (data == null) {
                            tbl.clear();
                            return;
                        }
                        fnCallback(data);
                        //$('.taskname').each(function () {
                        //    $(this).tipso({ width: "400px", position: "right", useTitle: true })
                        //});
                    }
                });
            }

        });
        //查询任务
        $("#btnSearchTask").click(function () {
            tbl.clear();
            tbl.draw();
        });
        
       // $('#taskname11').tipso();
       



        $("button[hdt=btnchangestatus]").click(function () {

            var nodeid = $(this).attr("nodeid");
            var taskid = $(this).attr("taskid");
            var taskversionid = $(this).attr("taskversionid");
            var commandname = $(this).attr("commandname");
            alert(taskid);
            swal({
                title: "你确定要执行此操作?",
                text: "执行完后稍候刷新查看执行结果!",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "确定",
                cancelButtonText: "取消",
                closeOnConfirm: true,
                closeOnCancel: true,
                showLoaderOnConfirm: true,
                animation: "slide-from-top"
            },
            function (isConfirm) {
                if (!isConfirm) {//取消
                    // swal("已取消", "您已取消此操作", "error");
                    return;
                }

                ChangeTaskStatus(nodeid, taskid, taskversionid, commandname);


            });

        });

       



    });
</script>











