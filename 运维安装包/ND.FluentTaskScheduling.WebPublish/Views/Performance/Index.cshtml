@model ND.FluentTaskScheduling.Model.response.LoadPerformancelistResponse
@using ND.FluentTaskScheduling.Model.enums
@using ND.FluentTaskScheduling.Model.response
@using ND.FluentTaskScheduling.Model;
@{
    ViewBag.Title = "Index";
    List<NodeDetailDto> nodelist = ViewBag.NodeList as List<NodeDetailDto>;
    List<TaskListDto> tasklist = ViewBag.TaskList as List<TaskListDto>;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="~/adminlte/plugins/chartjs/Chart.min.js"></script>
<section class="content-header">
    <h1>
        任务性能统计可视化列表
     
    </h1>
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i>性能分析</a></li>
        <li><a href="#">任务性能分析</a></li>
    </ol>
</section>

<section class="content">
    <!--查询条件-->

    <div class="box box-primary">
        <div class="box-header with-border">
            <h3 class="box-title">检索条件</h3>
            <div class="box-tools pull-right">

                <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
            </div>
        </div>

        <div class="box-body">

            <div class="row">
               



                <div class="col-md-2">
                    <div class="form-group">
                        <label>节点名称</label>
                        <select class="form-control select2" name="NodeId" id="selNodeNameList">
                            <option value="-1">全部</option>
                            @for (int i = 0; i < nodelist.Count; i++)
                            {
                                <option value="@nodelist[i].NodeDetail.id" @((ViewBag.NodeId + "") == nodelist[i].NodeDetail.id.ToString() ? "selected='selected'" : "")>@nodelist[i].NodeDetail.nodename</option>
                            }

                        </select>
                    </div>
                </div>

              
              

              

                <div class="col-md-2">
                    <div class="form-group">
                        <label>任务名称:</label>
                        <select class="form-control select2" name="TaskId" id="selTaskList">
                            <option value="-1">全部</option>
                            @for (int i = 0; i < tasklist.Count; i++)
                            {
                                <option value="@tasklist[i].Task.id" @((ViewBag.TaskId + "") == tasklist[i].Task.id.ToString() ? "selected='selected'" : "")>@tasklist[i].Task.taskname </option>
                            }
                        </select>
                        <!-- /.input group -->
                    </div>
                </div>

               

            </div>

        </div>

        <div class="box-footer">
            <button type="button" class="btn margin-r-5 btn-primary pull-right" id="btnSearchTask">查询</button>
        </div>

    </div>




    
</section>


    
    <div class="row">
    <div class="col-md-6">
       
             <!-- AREA CHART -->
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h3 class="box-title"></h3>
                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-box-tool" data-widget="collapse">
                            <i class="fa fa-minus"></i>
                        </button>
                        <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                    </div>
                </div>
                <div class="box-body">
                    <div class="chart">
                        <canvas class="areaChart" style="height:250px"></canvas>
                    </div>
                </div>
                <!-- /.box-body -->
            </div>
        
       

       
      </div>
 </div>


<script>
$(function(){
    //--------------
    //- AREA CHART -
    //--------------

    // Get context with jQuery - using jQuery's .get() method.
    var areaChartCanvas = $(".areaChart").get(0).getContext("2d");
    // This will get the first returned node in the jQuery collection.
    var areaChart = new Chart(areaChartCanvas);

    var areaChartData = {
        labels: ["January", "February", "March", "April", "May", "June", "July"],
        datasets: [
          {
              label: "Electronics",
              fillColor: "rgba(210, 214, 222, 1)",
              strokeColor: "rgba(210, 214, 222, 1)",
              pointColor: "rgba(210, 214, 222, 1)",
              pointStrokeColor: "#c1c7d1",
              pointHighlightFill: "#fff",
              pointHighlightStroke: "rgba(220,220,220,1)",
              data: [65, 59, 80, 81, 56, 55, 40]
          },
          {
              label: "Digital Goods",
              fillColor: "rgba(60,141,188,0.9)",
              strokeColor: "rgba(60,141,188,0.8)",
              pointColor: "#3b8bba",
              pointStrokeColor: "rgba(60,141,188,1)",
              pointHighlightFill: "#fff",
              pointHighlightStroke: "rgba(60,141,188,1)",
              data: [28, 48, 40, 19, 86, 27, 90]
          }
        ]
    };

    var areaChartOptions = {
        //Boolean - If we should show the scale at all
        showScale: true,
        //Boolean - Whether grid lines are shown across the chart
        scaleShowGridLines: false,
        //String - Colour of the grid lines
        scaleGridLineColor: "rgba(0,0,0,.05)",
        //Number - Width of the grid lines
        scaleGridLineWidth: 1,
        //Boolean - Whether to show horizontal lines (except X axis)
        scaleShowHorizontalLines: true,
        //Boolean - Whether to show vertical lines (except Y axis)
        scaleShowVerticalLines: true,
        //Boolean - Whether the line is curved between points
        bezierCurve: true,
        //Number - Tension of the bezier curve between points
        bezierCurveTension: 0.3,
        //Boolean - Whether to show a dot for each point
        pointDot: false,
        //Number - Radius of each point dot in pixels
        pointDotRadius: 4,
        //Number - Pixel width of point dot stroke
        pointDotStrokeWidth: 1,
        //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
        pointHitDetectionRadius: 20,
        //Boolean - Whether to show a stroke for datasets
        datasetStroke: true,
        //Number - Pixel width of dataset stroke
        datasetStrokeWidth: 2,
        //Boolean - Whether to fill the dataset with a color
        datasetFill: true,
        //String - A legend template
        legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>",
        //Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
        maintainAspectRatio: true,
        //Boolean - whether to make the chart responsive to window resizing
        responsive: true
    };

    //Create the line chart
    areaChart.Line(areaChartData, areaChartOptions);
})

</script>



